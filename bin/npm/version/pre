#!/usr/bin/env node

/*
  npm version from-git <--- recursion
  git reset HEAD~1
*/

const {PWD:dirname} = process.env

const {execSync} = require('child_process')
const {readFileSync:readFile, writeFileSync:writeFile} = require('fs')
const {join} = require('path')

const filename = join(dirname, 'package.json')

let info = require(filename)
let gtag = execSync('git describe --abbrev=0').toString('utf8')

if (!gtag) info.version = '0.0.0' // or exit maybe?

info.version = gtag

console.log(filename, gtag, info)

// console.log(info)

// , 'utf8', (_, data) => {
//   let info = JSON.parse(data)
//   info.version = execSync('git describe --abbrev=0')
//   writeFile('../../../package.json', info, 'utf8', noop)
// })

// console.log(dirname(require.main.filename))
// console.log(resolve(__dirname))
// console.log(process.cwd())

// const package = require('../../../package')
// console.log(package.version)

// fs.readFileSync('')
// fs.writeFileSync(filename, JSON.stringify(content));

// const last = execSync('git describe --abbrev=0')


// git describe --abbrev=0

// # progress=$(npm config get node-module:version_bump_in_progress)
// # echo $progress

// # [ "$progress" = "true" ] && {
// #   echo "! verion bump already in progress";
// #   exit 1;
// # }

// # npm config set node-module:version_nump_in_progress=true

// # [ -n "$npm_version_bump_in_progress" ] && {
// #   exit 1;
// # };

// # export npm_version_bump_in_progress=1

// restoring package.json version based on
// execSync('git reset --soft HEAD~1')
